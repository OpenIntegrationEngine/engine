<project name="mirth-core-util" basedir="." default="dist">
	<target name="help">
		<echo>Mirth Connect Core - Util</echo>
	</target>

	<target name="init">
		<property file="build.properties" />

		<path id="classpath">
			<fileset dir="${lib}" includes="**/*.jar" />
			<fileset dir="${core.models}/dist" includes="**/*.jar" />
			<fileset dir="${core.models}/lib" includes="**/*.jar" />
		</path>
	</target>

	<target name="clean" depends="init">
		<delete dir="${classes}" />
		<delete dir="${dist}" />
	</target>

	<target name="compile" depends="clean">
		<mkdir dir="${classes}" />

		<javac srcdir="${src}" destdir="${classes}" debug="on" includeAntRuntime="false">
			<classpath refid="classpath" />
		</javac>
		
		<!-- create version.properties file -->
		<propertyfile file="${name}.version.properties">
			<entry key="mirth.version" value="${mirthversion}" />
			<entry key="library.version" value="${version}" />
			<entry key="library.date" type="date" value="today" pattern="MMMM d, yyyy" />
		</propertyfile>
		<propertyfile file="version.properties">
			<entry key="mirth.version" value="${mirthversion}" />
			<entry key="mirth.date" type="date" value="today" pattern="MMMM d, yyyy" />
		</propertyfile>

		<!-- copy resource files to be placed in jars -->
		<copy todir="${classes}">
			<fileset file="${name}.version.properties" />
			<fileset file="version.properties" />
		</copy>
		<copy todir="${classes}/com/mirth/connect/util">
			<fileset dir="${src}/com/mirth/connect/util">
				<include name="*.js" />
				<include name="*.txt" />
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="compile">
		<mkdir dir="${dist}" />

		<jar destfile="${dist}/${name}-${version}.jar">
			<fileset dir="${classes}" />
		</jar>
	</target>
	
	<target name="test-init" depends="init">
		<delete dir="${test_classes}" />
		
		<path id="testclasspath">
			<fileset dir="testlib" includes="**/*.jar" />
			<dirset dir="${classes}"/>
			<path refid="classpath" />
		</path>
	</target>
	
	<target name="test-compile" depends="test-init">
		<!-- compile the source -->
		<mkdir dir="${test_classes}" />
		
		<javac srcdir="${test}" destdir="${test_classes}" debug="on" includeAntRuntime="false">
			<classpath refid="testclasspath" />
			<!-- Uncomment the following and add additional dashes in front of the arguments to allow Java 9+
				<compilerarg value="-add-modules" />
				<compilerarg value="java.sql.rowset,java.xml.ws" />
				<compilerarg value="-add-exports" />
				<compilerarg value="java.sql.rowset/com.sun.rowset=ALL-UNNAMED" />
			-->
		</javac>
		
		<copy todir="${test_classes}">
			<fileset dir="${test}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>
	
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="antlib/jacocoant.jar"/>
	</taskdef>
	
	<target name="test-run" depends="test-compile">
		<property name="junit-reports" value="junit-reports" />
		<property name="code-coverage-reports" value="code-coverage-reports" />
		<mkdir dir="${junit-reports}" />
		<mkdir dir="${code-coverage-reports}" />
		
		<jacoco:coverage destfile="${code-coverage-reports}/jacoco.exec" xmlns:jacoco="antlib:org.jacoco.ant" exclclassloader="sun.reflect.DelegatingClassLoader:javassist.Loader" >
			<junit haltonfailure="false" fork="true" forkmode="once">
				<jvmarg value="-Xms128m" />
				<jvmarg value="-Xmx1024m" />
				<!-- Uncomment the following and add additional dashes in front of the arguments to allow Java 9+
					<jvmarg value="-add-opens=java.base/java.util=ALL-UNNAMED" />
					<jvmarg value="-add-opens=java.base/java.lang=ALL-UNNAMED" />
					<jvmarg value="-add-opens=java.base/java.lang.reflect=ALL-UNNAMED" />
					<jvmarg value="-add-opens=java.base/java.text=ALL-UNNAMED" />
					<jvmarg value="-add-opens=java.desktop/java.awt=ALL-UNNAMED" />
					<jvmarg value="-add-opens=java.desktop/java.awt.font=ALL-UNNAMED" />
					<jvmarg value="-add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED" />
				-->
				<classpath>
					<path refid="testclasspath" />
					<dirset dir="${test_classes}"/>
				</classpath>
				<formatter type="xml" />
				<batchtest todir="${junit-reports}">
					<fileset dir="${test_classes}">
						<include name="**/*Test.class" />
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
	</target>
</project>
